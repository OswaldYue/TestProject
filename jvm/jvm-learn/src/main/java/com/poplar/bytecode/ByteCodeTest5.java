package com.poplar.bytecode;

/**
 * 栈帧(stack frame)
 * 栈帧是一种用于帮助虚拟机执行方法调用与方法执行的数据结构
 * 栈帧本身是一种数据结构，封装了方法的局部变量表，动态链接，方法的返回地址，操作数栈等信息
 *
 * 符号引用，直接引用
 * 有些符号引用在加载阶段或者或是第一次使用时，转换为直接引用，这种转换叫做静态解析；
 * 另外一些符号引用则是在运行期转换为直接引用，这种转换叫做动态链接，这体现为java的多态性。
 *
 * 静态解析的四种情形：静态方法、父类方法、构造方法、私有方法。
 * 以上四种方法称为非虚方法，在类加载阶段将符号引用转换为直接引用。final方法也是非虚方法。
 */
public class ByteCodeTest5 {

    public void test() {
        int a = 3;

        // 当b与c所占据的slot，在执行完毕后，可能会被d,e所使用
        if (a < 4) {
            int b = 4;
            int c = 5;
        }

        int d = 7;
        int e = 8;

    }
}
